plot_ly(y=~plot.listF1()[[1]], x=~plot.listF1()[[2]], z=~t(Re(plot.listF1()[[3]][,"1-1",])))  %>%layout(title="3D Representation of Coherence",
scene = list(
xaxis = list(title='Frequency',range = c(0.5, 0)),
yaxis = list(title="Timepoint"),
zaxis = list(title="Value"))) %>% add_surface() %>% colorbar(title="Value", len=1)
})
observeEvent(input$plot1_FxnCheck, ignoreNULL = TRUE, {
curr_num <- as.numeric(input$plot1_FxnCheck)
if(is.na(plot.listF1()[[4]])){
} else {
curr_comp <- plot.listF1()[[5]][curr_num]
output$Blank2 <- renderText({
paste(h4(strong((paste(curr_comp)))))
})
if(strsplit(curr_comp, "-")[[1]][1] == strsplit(curr_comp, "-")[[1]][2]){
output$Fxn_Plotb <- renderPlot({
image.plot(x=plot.listF1()[[1]],y=plot.listF1()[[2]],z=suppressWarnings(t(Re(plot.listF1()[[3]][,curr_comp,]))),
axes = TRUE, col = inferno(256),
main = plot.listF1()[[4]],xlab='Time',ylab='Hz',xaxs="i")
})
} else {
output$Fxn_Plotb <- renderPlot({
image.plot(x=plot.listF1()[[1]],y=plot.listF1()[[2]],z=suppressWarnings(t(Re(plot.listF1()[[3]][,curr_comp,]))),
axes = TRUE, col = inferno(256),
main = plot.listF1()[[7]],xlab='Time',ylab='Hz',xaxs="i");
})
}
}
})
observeEvent(input$q11_F1, ignoreNULL = TRUE, {
curr_num <- as.numeric(input$q11_F1)
if(is.na(plot.listF1()[[4]])){
} else {
curr_comp <- plot.listF1()[[5]][curr_num]
output$Blank10100 <- renderText({
paste(h4(strong((paste(curr_comp)))))
})
output$Plotly_Fxnb <- renderPlotly({
plot_ly(y=~plot.listF1()[[1]], x=~plot.listF1()[[2]], z=~t(Re(plot.listF1()[[3]][,curr_comp,])))  %>%layout(title="3D Representation of Coherence",
scene = list(
xaxis = list(title='Frequency',range = c(0.5, 0)),
yaxis = list(title="Timepoint"),
zaxis = list(title="Value"))) %>% add_surface() %>% colorbar(title="Value", len=1)
})
}
})
# observeEvent(input$Fxn_Row, ignoreNULL = TRUE, {
#   if(input$Fxn_Row == 'No'){
#     hide("Plotly_Fxna.5")
#     hide("x11_F1")
#     hide("FxnPlot11Desc")
#   } else {
#     show("Plotly_Fxna.5")
#     show("x11_F1")
#     updateSelectInput(session, "x11_F1", choices = seq(from=1, to = dim(plot.listF1()[[6]])[1], by=1), selected=1)
#     show("FxnPlot11Desc")
#     output$Plotly_Fxna.5 <- renderPlot({
#       ggplot() + geom_line(aes(x=seq(from=1, to=as.numeric(input$RF1), length.out=length(plot.listF1()[[6]][1,])), y=plot.listF1()[[6]][1,])) +
#         xlab("Functional Domain") + ylab("") + ggtitle("Simulated Data") + theme(plot.title = element_text(face="bold", hjust=0.5))
#     })
#     output$FxnPlot11Desc <- renderText({
#       paste(h4("Currently viewing timepoint "))
#     })
#
#   }
# })
#
plot.listaa <- eventReactive(input$file_csv, ignoreNULL = FALSE,  {
file <- input$file_csv
ext <- tools::file_ext(file$datapath)
le <- length(file[[1]])
if(le == 0){
} else {
file <- input$file_csv
ext <- tools::file_ext(file$datapath)
dataf <- read.csv(file$datapath, header = input$header)
dataf <- dataf[[1]]
list(dataf=dataf)}}
)
observeEvent(input$file_csv, {
file <- input$file_csv
ext <- tools::file_ext(file$datapath)
dataf <- read.csv(file$datapath, header = input$header)
dims <- dim(dataf)[2]
if(dims == 1){
hide("NotUniVar")
show("UniVarDis")
output$UniVarDis <- renderText({
paste(strong("This is a Univariate Time Series"))
})
hide("Data_Checker")
show("T_len")
show("Num2")
show("Tapers2")
show("Signi2")
show("TF2")
show("go2")
show("res9")
show("res10")
show("Image_Plota")
show("Image_Plotb")
show("downloadData1")
} else {
hide("UniVarDis")
show("NotUniVar")
output$NotUniVar <- renderText({
paste(strong("This time series has multiple components. Choose what type of
time series this is. "))
})
show("Data_Checker")
hide("T_len")
hide("Num2")
hide("Tapers2")
hide("Signi2")
hide("TF2")
hide("go2")
hide("res9")
hide("res10")
hide("Image_Plota")
hide("Image_Plotb")
hide("downloadData1")
}
})
observeEvent(input$file_csv, {
output$T_len <- renderText({
paste(strong("Total Length of Time Series (T): ", length(plot.listaa()[[1]])))
})
output$Blank <- renderText({
paste("")
})
output$Image_Plota <- renderPlot({
print( ggplot() + geom_line(aes(x=seq(0,1,length.out = length(plot.listaa()[[1]])), y= plot.listaa()[[1]])) + xlab("Time") +
ylab("") + ggtitle("Observed Time Series Data") + theme(plot.title = element_text(face="bold", hjust=0.5)) +
scale_x_continuous(limits=c(0,1), expand=c(0,0)))
})
file <- input$file_csv
ext <- tools::file_ext(file$datapath)
le <- length(file[[1]])
if(le == 0){
} else {
file <- input$file_csv
ext <- tools::file_ext(file$datapath)
dataf <- read.csv(file$datapath, header = input$header)
dataf <- dataf[[1]]
updateNumericInput(session, "Num2", value=floor(sqrt(length(dataf))))
updateNumericInput(session, "Tapers2", value=floor(0.15 * sqrt(length(dataf))))
output$res9 <- renderText({
paste(h6("*Valid choices range from 30 to ", floor(length(dataf)/2), "as we need to satisfy 30", HTML("&le;"),
"N", HTML("&le;"), HTML(paste(tags$sup("T"))), "/", HTML(paste(tags$sub(2)))))
})
output$res10 <- renderText({
paste("**Valid choices range from 1 to ", floor(sqrt(length(dataf))*0.24))
}) }
})
observeEvent(input$Num2, ignoreNULL = FALSE, {
file <- input$file_csv
ext <- tools::file_ext(file$datapath)
le <- length(file[[1]])
if(le == 0){
output$res10 <- renderText({
paste()
})
} else {
T_B <- input$Num2
K <- input$Tapers2
if(!is.na(T_B) & !is.na(K)){
f_part <- c(1, floor(T_B/2 + 1))
diff <- abs(diff(f_part)) / 2
for(i in 1:T_B){
temp_k <- i
bw <- floor((temp_k+1)*(T_B/(T_B+1))) + 1
if(bw < diff) {
} else {
break
}
}
bw <- floor((K+1)*(T_B/(T_B+1))) + 1
f_part <- c(1, floor(T_B/2 + 1))
flo_mea <- floor(mean(f_part))
max_tap <- ((flo_mea - 1) * ((T_B+1)/T_B)) - 1
mmm <- abs(diff(f.part))
output$res10 <- renderText({
paste(h6("**Valid choices range from 1 to ", (i-1), "as we need to satisfy ", HTML(paste(tags$sup("floor(N/2)"))),
"/", HTML(paste(tags$sub(2))), " - 1> floor((K+1)(", HTML(paste(tags$sup("N"))),
"/", HTML(paste(tags$sub("N+1"))), "))"))
})
}
}
})
output$res10 <- renderText({
})
plot.list2 <- eventReactive(input$go2, ignoreNULL = FALSE, {
file <- input$file_csv
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "csv", "Please upload a csv file"))
dataf <- read.csv(file$datapath, header = input$header)
dataf <- as.vector(dataf[[1]], mode = "numeric")
ebaoutfu <- eba.search(X=dataf,N= as.numeric(input$Num2),K=as.numeric(input$Tapers2),std=input$TF2,alpha=as.numeric(input$Signi2))
plot.x = ebaoutfu$mtspec$t
plot.y = ebaoutfu$mtspec$f
plot.z = t(ebaoutfu$mtspec$mtspec)
plot.main = "Multitaper Spectrogram"
plot.h = ebaoutfu$part.final[c(-1,-length(ebaoutfu$part.final))]
plot.data = dataf
list(plot.x = plot.x, plot.y = plot.y, plot.z = plot.z,
plot.main = plot.main, plot.h = plot.h, plot.data = plot.data)})
output$Image_Plot2 <- renderPlot({
par(mar=c(4,4,12,12))
vp.top <- viewport(height=unit(0.4, "npc"), width=unit(0.8, "npc"),
just=c( "bottom"), y=0.6, x=0.475)
plot.new()
image.plot(x=plot.list2()[[1]], y=plot.list2()[[2]], z=plot.list2()[[3]],
axes = TRUE, col = inferno(256),
xlab='Time',ylab='Hz',xaxs="i",
bigplot = c(0.075, .675, .125, .925), smallplot = c(.7, .75, .125, .925));title(plot.list2()[[4]], line=0.75);
abline(h=plot.list2()[[5]], col = "skyblue", lwd=3);
vp.br <- viewport(height=unit(0.5, "npc"), width=unit(0.4, "npc"),
just=c("left", "top"), y=0.625, x=0.7)
len <- length(plot.list2()[[5]])
vals <- plot.list2()[[5]]
if(len == 0){
str <- "(0, 0.5),"
} else if (len == 1) {
str <- paste("(0, ", round(vals, 3), "), [", round(vals, 3), ", 0.5),", sep="")
} else {
str <- paste("(0", sep="")
for(i in 1:len){
str <- paste(str, ", ",round(vals[i], 3),"),[", round(vals[i], 3), sep="")
}
str <- paste(str, ",", "0.5),", sep="")
}
spp <- strsplit(str, "),")[[1]]
for(a in 1:length(spp)){
spp[a] <- paste(spp[a], ")", sep="")
}
pp <- data.frame("Predicted Frequency Bands" = spp)
colnames(pp) <- c("Predicted \n Frequency Bands")
grid.table(pp, vp=vp.br, rows=NULL)
vp.r <- viewport(height=unit(0.5, "npc"), width=unit(0.4, "npc"),
just=c("left", "top"), y=0.8, x=0.7)
grid.polygon(x=c(0.29, 0.29,0.71, 0.71), y=c(0.6,0.4, 0.4,0.6 ), vp=vp.r)
jj <- grid.legend(c("Predicted Partition Points"), gp=gpar(lty=1, lwd=3, col=c("skyblue")), vp=vp.r,
draw=TRUE)
})
observeEvent(input$x_F1, ignoreNULL = FALSE, {
curr_row <- as.numeric(input$x_F1)
output$test12121 <- renderText({
paste(strong(h4(paste(curr_row))))
})
if(is.na(curr_row)){
} else {
output$Fxn_Plota <- renderPlotly({
a <- ggplot() + geom_line(aes(x=seq(from=0, to=1, length.out=length(plot.listF1()[[6]][curr_row,])), y=plot.listF1()[[6]][curr_row,])) +
xlab("Functional Domain") + ylab("") + ggtitle("Simulated Data") + theme(plot.title = element_text(face="bold", hjust=0.5)) +
scale_x_continuous(limits = c(0,1), expand=c(0,0))
ggplotly(a)
})
}
})
#####
observeEvent(input$q_F1, ignoreNULL = TRUE, {
curr_comp <- as.character(input$q_F1)
if(is.na(curr_comp)){
} else {
if(is.na(plot.listF1()[[4]])){
} else {
if(as.numeric(strsplit(curr_comp, "-")[[1]])[1] == as.numeric(strsplit(curr_comp, "-")[[1]][2])){
title = "Multitaper Autospectrum"
} else {
title = "Estimated Coherence"
}
output$Fxn_Plotb <- renderPlot({
image.plot(x=plot.listF1()[[1]],y=plot.listF1()[[2]],z=suppressWarnings(t(Re(plot.listF1()[[3]][,curr_comp,]))),
axes = TRUE, col = inferno(256),
main = title ,xlab='Time',ylab='Hz',xaxs="i");
})
}
}
})
# observeEvent(input$x11_F1, ignoreNULL = FALSE, {
#   curr_row <- as.numeric(input$x11_F1)
#   if(is.na(curr_row)){
#
#   } else {
#     output$Plotly_Fxna.5 <- renderPlot({
#       ggplot() + geom_line(aes(x=seq(from=0, to=1, length.out=length(plot.listF1()[[6]][curr_row,])), y=plot.listF1()[[6]][curr_row,])) +
#         xlab("Time") + ylab("") + ggtitle("Simulated Data") + theme(plot.title = element_text(face="bold", hjust=0.5)) +
#         scale_x_continuous(limits=c(0,1), expand=c(0,0))
#     })
#   }
#
# })
# observeEvent(input$q11_F1, ignoreNULL = TRUE, {
#   curr_comp <- as.character(input$q11_F1)
#   if(is.na(curr_comp)){
#
#   } else {
#     if(is.na(plot.listF1()[[4]])){
#
#     } else {
#       output$Plotly_Fxnb <- renderPlotly({
#         plot_ly(y=~plot.listF1()[[1]], x=~plot.listF1()[[2]], z=~t(Re(plot.listF1()[[3]][,curr_comp,])))  %>%layout(title="3D Representation of Coherence", scene = list(
#           xaxis = list(title='Frequency',range = c(0, 0.5)),
#           yaxis = list(title="Timepoint"),
#           zaxis = list(title="Value"))) %>% add_surface() %>% colorbar(title="Value", len=1)
#
#       })
#     }
#   }
#
# })
plot.list <- eventReactive(input$go, ignoreNULL = FALSE, {
X = eba.simdata(T=as.numeric(input$Time))
if (input$Simsetting == "W"){
ebaout.wn <- eba.search(X=X$wn,N= as.numeric(input$Num),K=as.numeric(input$Tapers),std=input$TF,alpha=as.numeric(input$Signi))
plot.x = ebaout.wn$mtspec$t
plot.y = ebaout.wn$mtspec$f
plot.z = t(ebaout.wn$mtspec$mtspec)
plot.main = "Multitaper Spectrogram for White Noise Setting"
plot.h = as.numeric(ebaout.wn$part.final[c(-1,-length(ebaout.wn$part.final))])
plot.data = X$wn
} else if (input$Simsetting == "L") {
ebaout.bL <- eba.search(X=X$bL,N= as.numeric(input$Num),K=as.numeric(input$Tapers),std=input$TF,alpha=as.numeric(input$Signi))
plot.x = ebaout.bL$mtspec$t
plot.y = ebaout.bL$mtspec$f
plot.z = t(ebaout.bL$mtspec$mtspec)
plot.main = "Multitaper Spectrogram for Linear Setting"
plot.h = as.numeric(ebaout.bL$part.final[c(-1,-length(ebaout.bL$part.final))])
plot.data = X$bL
} else if (input$Simsetting == "S") {
ebaout.bS <- eba.search(X=X$bS,N= as.numeric(input$Num),K=as.numeric(input$Tapers),std=input$TF,alpha=as.numeric(input$Signi))
plot.x = ebaout.bS$mtspec$t
plot.y = ebaout.bS$mtspec$f
plot.z = t(ebaout.bS$mtspec$mtspec)
plot.main = "Multitaper Spectrogram for Sinusoidal Setting"
plot.h = as.numeric(ebaout.bS$part.final[c(-1,-length(ebaout.bS$part.final))])
plot.data = X$bS
}
list(plot.x = plot.x, plot.y = plot.y, plot.z = plot.z,
plot.main = plot.main, plot.h = plot.h, plot.data = plot.data)
});
output$Image_Plot <- renderPlot({
par(mar=c(4,4,12,12))
vp.top <- viewport(height=unit(0.4, "npc"), width=unit(0.8, "npc"),
just=c( "bottom"), y=0.6, x=0.475)
plot.new()
image.plot(x=plot.list()[[1]], y=plot.list()[[2]], z=plot.list()[[3]],
axes = TRUE, col = inferno(256),
xlab='Time',ylab='Hz',xaxs="i",
bigplot = c(.1, .55, .1, .5), smallplot = c(.6, .65, .1, .5));title(plot.list()[[4]], line=0.75);
abline(h=plot.list()[[5]], col = "skyblue", lwd=3); abline(h=c(0.15, 0.35), col="lawngreen", lwd=3)
vp.br <- viewport(height=unit(0.5, "npc"), width=unit(0.4, "npc"),
just=c("left", "top"), y=0.5, x=0.6)
act <- c("(0, 0.15)", "[0.15, 0.35)", "[0.35, 0.5)")
len <- length(plot.list()[[5]])
vals <- plot.list()[[5]]
if(len == 0){
str <- "(0, 0.5),"
} else if (len == 1) {
str <- paste("(0, ", round(vals, 3), "), [", round(vals, 3), ", 0.5),", sep="")
} else {
str <- paste("(0", sep="")
for(i in 1:len){
str <- paste(str, ", ",round(vals[i], 3),"),[", round(vals[i], 3), sep="")
}
str <- paste(str, ",", "0.5),", sep="")
}
spp <- strsplit(str, "),")[[1]]
for(a in 1:length(spp)){
spp[a] <- paste(spp[a], ")", sep="")
}
max_len <- max(length(act), length(spp))
if(length(act) == length(spp)){
} else if(length(act) > length(spp)){
sp_l <- length(spp) + 1
for(i in sp_l: length(act)){
spp[i] <- ""
}
} else {
ac_l <- length(act) + 1
for(i in ac_l: length(spp)){
act[i] <- ""
}
}
pp <- data.frame("Actual Frequency Bands" = act, "Predicted Frequency Bands" = spp)
colnames(pp) <- c("Actual \n Frequency Bands", "Predicted \n Frequency Bands")
grid.table(pp, vp=vp.br, rows=NULL)
vp.r <- viewport(height=unit(0.5, "npc"), width=unit(0.4, "npc"),
just=c("left", "top"), y=0.65, x=0.6)
grid.polygon(x=c(0.29, 0.29,0.71, 0.71), y=c(0.6,0.4, 0.4,0.6 ), vp=vp.r)
jj <- grid.legend(c("Predicted Partition Points", "Actual Partition Points"), gp=gpar(lty=1, lwd=3, col=c("skyblue", "lawngreen")), vp=vp.r,
draw=TRUE)
print( ggplot() + geom_line(aes(x=seq(0,1,length.out = length(plot.list()[[6]])), y= plot.list()[[6]])) + xlab("Time") +
ylab("") + ggtitle("Simulated Time Series Data") + theme(plot.title = element_text(face="bold", hjust=0.5)) +
scale_x_continuous(limits=c(0,1), expand=c(0,0)), vp=vp.top)
});
output$downloadData <- downloadHandler(
filename = function(){
paste("Simulated_Output",input$downloadType,sep = ".")
},
content = function(file){
if(input$downloadType == "png") png(file, width = 1000, height=600)
else pdf(file, paper = "USr", width = 1100, height=600, onefile = FALSE)
par(mar=c(4,4,12,12))
vp.top <- viewport(height=unit(0.4, "npc"), width=unit(0.8, "npc"),
just=c( "bottom"), y=0.6, x=0.475)
plot.new()
image.plot(x=plot.list()[[1]], y=plot.list()[[2]], z=plot.list()[[3]],
axes = TRUE, col = inferno(256),
xlab='Time',ylab='Hz',xaxs="i",
bigplot = c(.1, .55, .1, .5), smallplot = c(.6, .65, .1, .5));title(plot.list()[[4]], line=0.75);
abline(h=plot.list()[[5]], col = "skyblue", lwd=3); abline(h=c(0.15, 0.35), col="lawngreen", lwd=3)
vp.br <- viewport(height=unit(0.5, "npc"), width=unit(0.43, "npc"),
just=c("left", "top"), y=0.5, x=0.65)
act <- c("(0, 0.15)", "[0.15, 0.35)", "[0.35, 0.5)")
len <- length(plot.list()[[5]])
vals <- plot.list()[[5]]
if(len == 0){
str <- "(0, 0.5),"
} else if (len == 1) {
str <- paste("(0, ", round(vals, 3), "),[", round(vals, 3), ", 0.5),", sep="")
} else {
str <- paste("(0", sep="")
for(i in 1:len){
str <- paste(str, ", ",round(vals[i], 3),"),[", round(vals[i], 3), sep="")
}
str <- paste(str, ",", "0.5),", sep="")
}
spp <- strsplit(str, "),")[[1]]
for(a in 1:length(spp)){
spp[a] <- paste(spp[a], ")", sep="")
}
max_len <- max(length(act), length(spp))
if(length(act) == length(spp)){
} else if(length(act) > length(spp)){
sp_l <- length(spp) + 1
for(i in sp_l: length(act)){
spp[i] <- ""
}
} else {
ac_l <- length(act) + 1
for(i in ac_l: length(spp)){
act[i] <- ""
}
}
pp <- data.frame("Actual Frequency Bands" = act, "Predicted Frequency Bands" = spp)
colnames(pp) <- c("Actual \n Frequency Bands", "Predicted \n Frequency Bands")
#colnames(pp) <- stringr::str_replace_all(colnames(df), "\\n", "<br>")
grid.table(pp, vp=vp.br, rows=NULL)
vp.r <- viewport(height=unit(0.5, "npc"), width=unit(0.43, "npc"),
just=c("left", "top"), y=0.65, x=0.65)
grid.polygon(x=c(0.29, 0.29,0.71, 0.71), y=c(0.6,0.4, 0.4,0.6 ), vp=vp.r)
jj <- grid.legend(c("Predicted Partition Points", "Actual Partition Points"), gp=gpar(lty=1, lwd=3, col=c("skyblue", "lawngreen")), vp=vp.r,
draw=TRUE)
print( ggplot() + geom_line(aes(x=seq(0,1,length.out = length(plot.list()[[6]])), y= plot.list()[[6]])) + xlab("Time") +
ylab("") + ggtitle("Simulated Time Series Data") + theme(plot.title = element_text(face="bold", hjust=0.5)) +
scale_x_continuous(limits=c(0,1), expand=c(0,0)), vp=vp.top)
dev.off()
}
)
output$downloadData1 <- downloadHandler(
filename = function(){
paste("Observed_Output",input$downloadType,sep = ".")
},
content = function(file){
if(input$downloadType == "png") png(file, width = 1000, height=600)
else pdf(file, paper = "USr", width = 1100, height=600, onefile = FALSE)
par(mar=c(4,4,12,12))
vp.top <- viewport(height=unit(0.4, "npc"), width=unit(0.8, "npc"),
just=c( "bottom"), y=0.6, x=0.475)
plot.new()
image.plot(x=plot.list2()[[1]], y=plot.list2()[[2]], z=plot.list2()[[3]],
axes = TRUE, col = inferno(256),
xlab='Time',ylab='Hz',xaxs="i",
bigplot = c(.125, .575, .125, .525), smallplot = c(.6, .65, .1, .5));title(plot.list2()[[4]], line=0.75);
abline(h=plot.list2()[[5]], col = "skyblue", lwd=3);
vp.br <- viewport(height=unit(0.5, "npc"), width=unit(0.4, "npc"),
just=c("left", "top"), y=0.5, x=0.6)
len <- length(plot.list2()[[5]])
vals <- plot.list2()[[5]]
if(len == 0){
str <- "(0, 0.5),"
} else if (len == 1) {
str <- paste("(0, ", round(vals, 3), "), [", round(vals, 3), ", 0.5),", sep="")
} else {
str <- paste("(0", sep="")
for(i in 1:len){
str <- paste(str, ", ",round(vals[i], 3),"),[", round(vals[i], 3), sep="")
}
str <- paste(str, ",", "0.5),", sep="")
}
spp <- strsplit(str, "),")[[1]]
for(a in 1:length(spp)){
spp[a] <- paste(spp[a], ")", sep="")
}
pp <- data.frame("Predicted Frequency Bands" = spp)
colnames(pp) <- c("Predicted \n Frequency Bands")
grid.table(pp, vp=vp.br, rows=NULL)
vp.r <- viewport(height=unit(0.5, "npc"), width=unit(0.4, "npc"),
just=c("left", "top"), y=0.65, x=0.6)
grid.polygon(x=c(0.29, 0.29,0.71, 0.71), y=c(0.6,0.4, 0.4,0.6 ), vp=vp.r)
jj <- grid.legend(c("Predicted Partition Points"), gp=gpar(lty=1, lwd=3, col=c("skyblue")), vp=vp.r,
draw=TRUE)
print( ggplot() + geom_line(aes(x=seq(0,1,length.out = length(plot.list2()[[6]])), y= plot.list2()[[6]])) + xlab("Time") +
ylab("") + ggtitle("Observed Time Series Data") + theme(plot.title = element_text(face="bold", hjust=0.5)) +
scale_x_continuous(limits=c(0,1), expand=c(0,0)), vp=vp.top)
dev.off()
}
)
}
shinyApp(ui = ui, server = server)
