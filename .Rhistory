just=c("left", "top"), y=0.625, x=0.7)
len <- length(plot.list2()[[5]])
vals <- plot.list2()[[5]]
if(len == 0){
str <- "(0, 0.5),"
} else if (len == 1) {
str <- paste("(0, ", round(vals, 3), "), [", round(vals, 3), ", 0.5),", sep="")
} else {
str <- paste("(0", sep="")
for(i in 1:len){
str <- paste(str, ", ",round(vals[i], 3),"),[", round(vals[i], 3), sep="")
}
str <- paste(str, ",", "0.5),", sep="")
}
spp <- strsplit(str, "),")[[1]]
for(a in 1:length(spp)){
spp[a] <- paste(spp[a], ")", sep="")
}
pp <- data.frame("Predicted Frequency Bands" = spp)
colnames(pp) <- c("Predicted \n Frequency Bands")
grid.table(pp, vp=vp.br, rows=NULL)
vp.r <- viewport(height=unit(0.5, "npc"), width=unit(0.4, "npc"),
just=c("left", "top"), y=0.8, x=0.7)
grid.polygon(x=c(0.29, 0.29,0.71, 0.71), y=c(0.6,0.4, 0.4,0.6 ), vp=vp.r)
jj <- grid.legend(c("Predicted Partition Points"), gp=gpar(lty=1, lwd=3, col=c("skyblue")), vp=vp.r,
draw=TRUE)
})
observeEvent(input$x_F1, ignoreNULL = FALSE, {
curr_row <- as.numeric(input$x_F1)
output$test12121 <- renderText({
paste(h4(strong(paste(curr_row))))
})
if(is.na(curr_row)){
} else {
output$Fxn_Plota <- renderPlotly({
a <- ggplot() + geom_line(aes(x=seq(from=0, to=1, length.out=length(plot.listF1()[[6]][curr_row,])), y=plot.listF1()[[6]][curr_row,])) +
xlab("Functional Domain") + ylab("") + ggtitle("Simulated Data") + theme(plot.title = element_text(face="bold", hjust=0.5)) +
scale_x_continuous(limits = c(0,1), expand=c(0,0))
ggplotly(a)
})
}
})
#####
observeEvent(input$q_F1, ignoreNULL = TRUE, {
curr_comp <- as.character(input$q_F1)
if(is.na(curr_comp)){
} else {
if(is.na(plot.listF1()[[4]])){
} else {
if(as.numeric(strsplit(curr_comp, "-")[[1]])[1] == as.numeric(strsplit(curr_comp, "-")[[1]][2])){
title = "Multitaper Autospectrum"
} else {
title = "Estimated Coherence"
}
output$Fxn_Plotb <- renderPlot({
image.plot(x=plot.listF1()[[1]],y=plot.listF1()[[2]],z=suppressWarnings(t(Re(plot.listF1()[[3]][,curr_comp,]))),
axes = TRUE, col = inferno(256),
main = title ,xlab='Time',ylab='Hz',xaxs="i");
})
}
}
})
plot.list <- eventReactive(input$go, ignoreNULL = FALSE, {
set.seed(823819)
X = eba.simdata(T=as.numeric(input$Time))
if (input$Simsetting == "W"){
ebaout.wn <- eba.search(X=X$wn,N= as.numeric(input$Num),K=as.numeric(input$Tapers),std=input$TF,alpha=as.numeric(input$Signi))
plot.x = ebaout.wn$mtspec$t
plot.y = ebaout.wn$mtspec$f
plot.z = t(ebaout.wn$mtspec$mtspec)
plot.main = "Multitaper Spectrogram for White Noise Setting"
plot.h = as.numeric(ebaout.wn$part.final[c(-1,-length(ebaout.wn$part.final))])
plot.data = X$wn
plot.log = ebaout.wn$log
plot.pvals = ebaout.wn$pvals
plot.flat = ebaout.wn$flat
} else if (input$Simsetting == "L") {
ebaout.bL <- eba.search(X=X$bL,N= as.numeric(input$Num),K=as.numeric(input$Tapers),std=input$TF,alpha=as.numeric(input$Signi))
plot.x = ebaout.bL$mtspec$t
plot.y = ebaout.bL$mtspec$f
plot.z = t(ebaout.bL$mtspec$mtspec)
plot.main = "Multitaper Spectrogram for Linear Setting"
plot.h = as.numeric(ebaout.bL$part.final[c(-1,-length(ebaout.bL$part.final))])
plot.data = X$bL
plot.log = ebaout.bL$log
plot.pvals = ebaout.bL$pvals
plot.flat = ebaout.bL$flat
} else if (input$Simsetting == "S") {
ebaout.bS <- eba.search(X=X$bS,N= as.numeric(input$Num),K=as.numeric(input$Tapers),std=input$TF,alpha=as.numeric(input$Signi))
plot.x = ebaout.bS$mtspec$t
plot.y = ebaout.bS$mtspec$f
plot.z = t(ebaout.bS$mtspec$mtspec)
plot.main = "Multitaper Spectrogram for Sinusoidal Setting"
plot.h = as.numeric(ebaout.bS$part.final[c(-1,-length(ebaout.bS$part.final))])
plot.data = X$bS
plot.log = ebaout.bS$log
plot.pvals = ebaout.bS$pvals
plot.flat = ebaout.bS$flat
}
list(plot.x = plot.x, plot.y = plot.y, plot.z = plot.z,
plot.main = plot.main, plot.h = plot.h, plot.data = plot.data,
plot.log = plot.log, plot.pvals = plot.pvals, plot.flat = plot.flat)
});
output$Image_Plot <- renderPlot({
par(mar=c(4,4,12,12))
vp.top <- viewport(height=unit(0.4, "npc"), width=unit(0.8, "npc"),
just=c( "bottom"), y=0.6, x=0.475)
plot.new()
image.plot(x=plot.list()[[1]], y=plot.list()[[2]], z=plot.list()[[3]],
axes = TRUE, col = inferno(256),
xlab='Time',ylab='Hz',xaxs="i",
bigplot = c(.1, .55, .1, .5), smallplot = c(.6, .65, .1, .5));title(plot.list()[[4]], line=0.75);
abline(h=plot.list()[[5]], col = "skyblue", lwd=3); abline(h=c(0.15, 0.35), col="lawngreen", lwd=3)
vp.br <- viewport(height=unit(0.5, "npc"), width=unit(0.4, "npc"),
just=c("left", "top"), y=0.5, x=0.6)
act <- c("(0, 0.15)", "[0.15, 0.35)", "[0.35, 0.5)")
len <- length(plot.list()[[5]])
vals <- plot.list()[[5]]
if(len == 0){
str <- "(0, 0.5),"
} else if (len == 1) {
str <- paste("(0, ", round(vals, 3), "), [", round(vals, 3), ", 0.5),", sep="")
} else {
str <- paste("(0", sep="")
for(i in 1:len){
str <- paste(str, ", ",round(vals[i], 3),"),[", round(vals[i], 3), sep="")
}
str <- paste(str, ",", "0.5),", sep="")
}
spp <- strsplit(str, "),")[[1]]
for(a in 1:length(spp)){
spp[a] <- paste(spp[a], ")", sep="")
}
max_len <- max(length(act), length(spp))
if(length(act) == length(spp)){
} else if(length(act) > length(spp)){
sp_l <- length(spp) + 1
for(i in sp_l: length(act)){
spp[i] <- ""
}
} else {
ac_l <- length(act) + 1
for(i in ac_l: length(spp)){
act[i] <- ""
}
}
pp <- data.frame("Actual Frequency Bands" = act, "Predicted Frequency Bands" = spp)
colnames(pp) <- c("Actual \n Frequency Bands", "Predicted \n Frequency Bands")
grid.table(pp, vp=vp.br, rows=NULL)
vp.r <- viewport(height=unit(0.5, "npc"), width=unit(0.4, "npc"),
just=c("left", "top"), y=0.65, x=0.6)
grid.polygon(x=c(0.29, 0.29,0.71, 0.71), y=c(0.6,0.4, 0.4,0.6 ), vp=vp.r)
jj <- grid.legend(c("Predicted Partition Points", "Actual Partition Points"), gp=gpar(lty=1, lwd=3, col=c("skyblue", "lawngreen")), vp=vp.r,
draw=TRUE)
print( ggplot() + geom_line(aes(x=seq(0,1,length.out = length(plot.list()[[6]])), y= plot.list()[[6]])) + xlab("Time") +
ylab("") + ggtitle("Simulated Time Series Data") + theme(plot.title = element_text(face="bold", hjust=0.5)) +
scale_x_continuous(limits=c(0,1), expand=c(0,0)), vp=vp.top)
});
output$summ_out_uni <- renderPlot({
pvals <- round(plot.list()[[7]][,4], 5)
pval.th <- round(plot.list()[[7]][,5], 5)
Sig <- character(length(pvals))
for(i in 1:length(Sig)){
if(pvals[i] < pval.th[i]){
Sig[i] <- "TRUE"
} else {
Sig[i] <- "FALSE"
}
}
pp <- data.frame("Frequency" = round(plot.list()[[7]][,2], 3), "P-Value" = round(plot.list()[[7]][,4], 5),
"P-Value\nThreshold" = round(plot.list()[[7]][,5], 5), "Significance" = as.character(Sig))
colnames(pp) <- c("Frequency", "P-Value", "P-Value \n Threshold", "Significant")
table <- tableGrob(pp, rows=NULL)
title <- textGrob(expression(bold("Summary of Partition \n      Point Tests")))
blank1 <- textGrob("")
len <- length(plot.list()[[5]])
vals <- plot.list()[[5]]
if(len == 0){
str <- "(0, 0.5),"
} else if (len == 1) {
str <- paste("(0, ", round(vals, 3), "), [", round(vals, 3), ", 0.5),", sep="")
} else {
str <- paste("(0", sep="")
for(i in 1:len){
str <- paste(str, ", ",round(vals[i], 3),"),[", round(vals[i], 3), sep="")
}
str <- paste(str, ",", "0.5),", sep="")
}
spp <- strsplit(str, "),")[[1]]
for(a in 1:length(spp)){
spp[a] <- paste(spp[a], ")", sep="")
}
pvals <- plot.list()[[9]][,2]
Res <- character(length(pvals))
Sig2 <- numeric(length(pvals))
for(i in 1:length(Res)){
if(pvals[i] < 0.05){
Res[i] = "Segment has \n nonflat spectrum"
Sig2[i] = "TRUE"
} else {
Res[i] = "Segment has \n flat spectrum"
Sig2[i] = "FALSE"
}
}
blank1 <- textGrob(""); blank2 <- textGrob("")
new_tab <- data.frame("Frequency Bands" = spp, "P-Values" = round(as.numeric(pvals), 5),"Significant" = Sig2 ,"Results" = Res)
colnames(new_tab) <- c("Frequency \n Bands", "P-Value", "Significant", "Results")
test1 <- tableGrob(new_tab, rows = NULL);
title2 <- textGrob(expression(bold("Summary of Testing for Flat \n Spectrum in Each Segment")))
#grid.arrange(test1)
grid.arrange(title, table, title2, test1,blank2, heights = c(0.75,0.75,0.85,0.75, 1) ,nrow = 5)
})
output$summ_out_uni_file <- renderPlot({
pvals <- round(plot.list2()[[7]][,4], 5)
pval.th <- round(plot.list2()[[7]][,5], 5)
Sig <- character(length(pvals))
for(i in 1:length(Sig)){
if(pvals[i] < pval.th[i]){
Sig[i] <- "TRUE"
} else {
Sig[i] <- "FALSE"
}
}
pp <- data.frame("Frequency" = round(plot.list2()[[7]][,2], 3), "P-Value" = round(plot.list2()[[7]][,4], 5),
"P-Value\nThreshold" = round(plot.list2()[[7]][,5], 5), "Significance" = as.character(Sig))
colnames(pp) <- c("Frequency", "P-Value", "P-Value \n Threshold", "Significant")
table <- tableGrob(pp, rows=NULL)
title <- textGrob(expression(bold("Summary of Partition \n      Point Tests")))
blank1 <- textGrob("")
len <- length(plot.list2()[[5]])
vals <- plot.list2()[[5]]
if(len == 0){
str <- "(0, 0.5),"
} else if (len == 1) {
str <- paste("(0, ", round(vals, 3), "), [", round(vals, 3), ", 0.5),", sep="")
} else {
str <- paste("(0", sep="")
for(i in 1:len){
str <- paste(str, ", ",round(vals[i], 3),"),[", round(vals[i], 3), sep="")
}
str <- paste(str, ",", "0.5),", sep="")
}
spp <- strsplit(str, "),")[[1]]
for(a in 1:length(spp)){
spp[a] <- paste(spp[a], ")", sep="")
}
pvals <- plot.list2()[[9]][,2]
Res <- character(length(pvals))
Sig2 <- numeric(length(pvals))
for(i in 1:length(Res)){
if(pvals[i] < 0.05){
Res[i] = "Segment has \n nonflat spectrum"
Sig2[i] = "TRUE"
} else {
Res[i] = "Segment has \n flat spectrum"
Sig2[i] = "FALSE"
}
}
blank1 <- textGrob(""); blank2 <- textGrob("")
new_tab <- data.frame("Frequency Bands" = spp, "P-Values" = round(as.numeric(pvals), 5),"Significant" = Sig2 ,"Results" = Res)
colnames(new_tab) <- c("Frequency \n Bands", "P-Value", "Significant", "Results")
test1 <- tableGrob(new_tab, rows = NULL);
title2 <- textGrob(expression(bold("Summary of Testing for Flat \n Spectrum in Each Segment")))
#grid.arrange(test1)
grid.arrange(title, table, title2, test1,blank2, heights = c(0.75,0.75,0.85,0.75, 1) ,nrow = 5)
})
output$summ_pval_uni <- renderPlot({
#pvals <- plot.list()[[8]]
#freqs <- names(pvals)
#vals <- unname(pvals)
ggplot() + geom_point(aes(x = as.numeric(plot.list()[[8]][,1]), y = as.numeric(plot.list()[[8]][,2]))) + xlim(c(0,0.5)) + ylim(c(0,1)) +
xlab("Frequency") + ylab("P-Value") + ggtitle("P-Values for Testing Partition Points") + theme(plot.title = element_text(face="bold", hjust=0.5)) +
geom_vline(xintercept = plot.list()[[5]], linetype = "dashed") + scale_x_continuous(expand=c(0,0), limits=c(0,0.5)) + scale_y_continuous(expand = c(0,0), limits=c(0,1))
})
output$summ_pval_uni_file <- renderPlot({
ggplot() + geom_point(aes(x = as.numeric(plot.list2()[[8]][,1]), y = as.numeric(plot.list2()[[8]][,2]))) + xlim(c(0,0.5)) + ylim(c(0,1)) +
xlab("Frequency") + ylab("P-Value") + ggtitle("P-Values for Testing Partition Points") + theme(plot.title = element_text(face="bold", hjust=0.5)) +
geom_vline(xintercept = plot.list2()[[5]], linetype = "dashed") + scale_x_continuous(expand=c(0,0), limits=c(0,0.5)) + scale_y_continuous(expand = c(0,0), limits=c(0,1))
})
output$downloadData <- downloadHandler(
filename = function(){
paste("Simulated_Output_Results","pdf",sep = ".")
},
content = function(file){
pdf(file, paper = "USr", width = 1100, height=600, onefile = TRUE)
par(mar=c(4,4,12,12))
vp.top <- viewport(height=unit(0.4, "npc"), width=unit(0.8, "npc"),
just=c( "bottom"), y=0.6, x=0.475)
#plot.new()
image.plot(x=plot.list()[[1]], y=plot.list()[[2]], z=plot.list()[[3]],
axes = TRUE, col = inferno(256),
xlab='Time',ylab='Hz',xaxs="i",
bigplot = c(.1, .55, .1, .5), smallplot = c(.6, .65, .1, .5));title(plot.list()[[4]], line=0.75);
abline(h=plot.list()[[5]], col = "skyblue", lwd=3); abline(h=c(0.15, 0.35), col="lawngreen", lwd=3)
vp.br <- viewport(height=unit(0.5, "npc"), width=unit(0.43, "npc"),
just=c("left", "top"), y=0.5, x=0.65)
act <- c("(0, 0.15)", "[0.15, 0.35)", "[0.35, 0.5)")
len <- length(plot.list()[[5]])
vals <- plot.list()[[5]]
if(len == 0){
str <- "(0, 0.5),"
} else if (len == 1) {
str <- paste("(0, ", round(vals, 3), "),[", round(vals, 3), ", 0.5),", sep="")
} else {
str <- paste("(0", sep="")
for(i in 1:len){
str <- paste(str, ", ",round(vals[i], 3),"),[", round(vals[i], 3), sep="")
}
str <- paste(str, ",", "0.5),", sep="")
}
spp <- strsplit(str, "),")[[1]]
for(a in 1:length(spp)){
spp[a] <- paste(spp[a], ")", sep="")
}
max_len <- max(length(act), length(spp))
if(length(act) == length(spp)){
} else if(length(act) > length(spp)){
sp_l <- length(spp) + 1
for(i in sp_l: length(act)){
spp[i] <- ""
}
} else {
ac_l <- length(act) + 1
for(i in ac_l: length(spp)){
act[i] <- ""
}
}
pp <- data.frame("Actual Frequency Bands" = act, "Predicted Frequency Bands" = spp)
colnames(pp) <- c("Actual \n Frequency Bands", "Predicted \n Frequency Bands")
vp.br <- viewport(height=unit(0.5, "npc"), width=unit(0.43, "npc"),
just=c("left", "top"), y=0.5, x=0.63)
grid.table(pp, vp=vp.br, rows=NULL)
vp.r <- viewport(height=unit(0.5, "npc"), width=unit(0.5, "npc"),
just=c("left", "top"), y=0.65, x=0.58)
grid.polygon(x=c(0.29, 0.29,0.71, 0.71), y=c(0.6,0.4, 0.4,0.6 ), vp=vp.r)
jj <- grid.legend(c("Predicted Partition Points", "Actual Partition Points"), gp=gpar(lty=1, lwd=3, col=c("skyblue", "lawngreen")), vp=vp.r,
draw=TRUE)
print( ggplot() + geom_line(aes(x=seq(0,1,length.out = length(plot.list()[[6]])), y= plot.list()[[6]])) + xlab("Time") +
ylab("") + ggtitle("Simulated Time Series Data") + theme(plot.title = element_text(face="bold", hjust=0.5)) +
scale_x_continuous(limits=c(0,1), expand=c(0,0)), vp=vp.top)
#plot.new()
vp.r <- viewport(height=unit(1, "npc"), width=unit(0.5, "npc"),
y=0.5, x=0.75)
vp.l <- viewport(height=unit(1, "npc"), width=unit(0.5, "npc"),
y=0.5, x=0.25)
pvals <- round(plot.list()[[7]][,4], 5)
pval.th <- round(plot.list()[[7]][,5], 5)
Sig <- character(length(pvals))
for(i in 1:length(Sig)){
if(pvals[i] < pval.th[i]){
Sig[i] <- "TRUE"
} else {
Sig[i] <- "FALSE"
}
}
pp <- data.frame("Frequency" = round(plot.list()[[7]][,2], 3), "P-Value" = round(plot.list()[[7]][,4], 5),
"P-Value\nThreshold" = round(plot.list()[[7]][,5], 5), "Significance" = as.character(Sig))
colnames(pp) <- c("Frequency", "P-Value", "P-Value \n Threshold", "Significant")
table <- tableGrob(pp, rows=NULL)
title <- textGrob(expression(bold("Summary of Partition \n      Point Tests")))
blank1 <- textGrob("")
len <- length(plot.list()[[5]])
vals <- plot.list()[[5]]
if(len == 0){
str <- "(0, 0.5),"
} else if (len == 1) {
str <- paste("(0, ", round(vals, 3), "), [", round(vals, 3), ", 0.5),", sep="")
} else {
str <- paste("(0", sep="")
for(i in 1:len){
str <- paste(str, ", ",round(vals[i], 3),"),[", round(vals[i], 3), sep="")
}
str <- paste(str, ",", "0.5),", sep="")
}
spp <- strsplit(str, "),")[[1]]
for(a in 1:length(spp)){
spp[a] <- paste(spp[a], ")", sep="")
}
pvals <- plot.list()[[9]][,2]
Res <- character(length(pvals))
Sig2 <- numeric(length(pvals))
for(i in 1:length(Res)){
if(pvals[i] < 0.05){
Res[i] = "Segment has \n nonflat spectrum"
Sig2[i] = "TRUE"
} else {
Res[i] = "Segment has \n flat spectrum"
Sig2[i] = "FALSE"
}
}
blank1 <- textGrob(""); blank2 <- textGrob("")
new_tab <- data.frame("Frequency Bands" = spp, "P-Values" = round(as.numeric(pvals), 5),"Significant" = Sig2 ,"Results" = Res)
colnames(new_tab) <- c("Frequency \n Bands", "P-Value", "Significant", "Results")
test1 <- tableGrob(new_tab, rows = NULL);
title2 <- textGrob(expression(bold("Summary of Testing for Flat \n Spectrum in Each Segment")))
#grid.arrange(test1)
grid.arrange(title, table, title2, test1,blank2, heights = c(0.75,0.75,0.85,0.75, 1) ,nrow = 5, vp = vp.l)
print(ggplot() + geom_point(aes(x = as.numeric(plot.list()[[8]][,1]), y = as.numeric(plot.list()[[8]][,2]))) + xlim(c(0,0.5)) + ylim(c(0,1)) +
xlab("Frequency") + ylab("P-Value") + ggtitle("P-Values for Testing Partition Points") + theme(plot.title = element_text(face="bold", hjust=0.5)) +
geom_vline(xintercept = plot.list()[[5]], linetype = "dashed") , vp=vp.r)
dev.off()
}
)
output$downloadData1 <- downloadHandler(
filename = function(){
paste("Observed_Output_Results","pdf",sep = ".")
},
content = function(file){
pdf(file, paper = "USr", width = 1100, height=600, onefile = TRUE)
par(mar=c(4,4,12,12))
vp.top <- viewport(height=unit(0.4, "npc"), width=unit(0.8, "npc"),
just=c( "bottom"), y=0.6, x=0.475)
image.plot(x=plot.list2()[[1]], y=plot.list2()[[2]], z=plot.list2()[[3]],
axes = TRUE, col = inferno(256),
xlab='Time',ylab='Hz',xaxs="i",
bigplot = c(.125, .575, .125, .525), smallplot = c(.6, .65, .1, .5));title(plot.list2()[[4]], line=0.75);
abline(h=plot.list2()[[5]], col = "skyblue", lwd=3);
len <- length(plot.list2()[[5]])
vals <- plot.list2()[[5]]
if(len == 0){
str <- "(0, 0.5),"
} else if (len == 1) {
str <- paste("(0, ", round(vals, 3), "), [", round(vals, 3), ", 0.5),", sep="")
} else {
str <- paste("(0", sep="")
for(i in 1:len){
str <- paste(str, ", ",round(vals[i], 3),"),[", round(vals[i], 3), sep="")
}
str <- paste(str, ",", "0.5),", sep="")
}
spp <- strsplit(str, "),")[[1]]
for(a in 1:length(spp)){
spp[a] <- paste(spp[a], ")", sep="")
}
pp <- data.frame("Predicted Frequency Bands" = spp)
colnames(pp) <- c("Predicted \n Frequency Bands")
vp.br <- viewport(height=unit(0.5, "npc"), width=unit(0.43, "npc"),
just=c("left", "top"), y=0.5, x=0.63)
grid.table(pp, vp=vp.br, rows=NULL)
vp.r <- viewport(height=unit(0.5, "npc"), width=unit(0.5, "npc"),
just=c("left", "top"), y=0.65, x=0.58)
grid.polygon(x=c(0.29, 0.29,0.71, 0.71), y=c(0.6,0.4, 0.4,0.6 ), vp=vp.r)
jj <- grid.legend(c("Predicted Partition Points"), gp=gpar(lty=1, lwd=3, col=c("skyblue")), vp=vp.r,
draw=TRUE)
print( ggplot() + geom_line(aes(x=seq(0,1,length.out = length(plot.list2()[[6]])), y= plot.list2()[[6]])) + xlab("Time") +
ylab("") + ggtitle("Observed Time Series Data") + theme(plot.title = element_text(face="bold", hjust=0.5)) +
scale_x_continuous(limits=c(0,1), expand=c(0,0)), vp=vp.top)
vp.r <- viewport(height=unit(1, "npc"), width = unit(0.5, "npc"),
x=0.75, y=0.5)
vp.l <- viewport(height=unit(1, "npc"), width = unit(0.5, "npc"),
x=0.25, y=0.5)
pvals <- round(plot.list2()[[7]][,4], 5)
pval.th <- round(plot.list2()[[7]][,5], 5)
Sig <- character(length(pvals))
for(i in 1:length(Sig)){
if(pvals[i] < pval.th[i]){
Sig[i] <- "TRUE"
} else {
Sig[i] <- "FALSE"
}
}
pp <- data.frame("Frequency" = round(plot.list2()[[7]][,2], 3), "P-Value" = round(plot.list2()[[7]][,4], 5),
"P-Value\nThreshold" = round(plot.list2()[[7]][,5], 5), "Significance" = as.character(Sig))
colnames(pp) <- c("Frequency", "P-Value", "P-Value \n Threshold", "Significant")
table <- tableGrob(pp, rows=NULL)
title <- textGrob(expression(bold("Summary of Partition \n      Point Tests")))
blank1 <- textGrob("")
#grid.arrange(title, table, heights = c(2, 1, 5))
len <- length(plot.list2()[[5]])
vals <- plot.list2()[[5]]
if(len == 0){
str <- "(0, 0.5),"
} else if (len == 1) {
str <- paste("(0, ", round(vals, 3), "), [", round(vals, 3), ", 0.5),", sep="")
} else {
str <- paste("(0", sep="")
for(i in 1:len){
str <- paste(str, ", ",round(vals[i], 3),"),[", round(vals[i], 3), sep="")
}
str <- paste(str, ",", "0.5),", sep="")
}
spp <- strsplit(str, "),")[[1]]
for(a in 1:length(spp)){
spp[a] <- paste(spp[a], ")", sep="")
}
pvals <- plot.list2()[[9]][,2]
Res <- character(length(pvals))
Sig2 <- numeric(length(pvals))
for(i in 1:length(Res)){
if(pvals[i] < 0.05){
Res[i] = "Segment has \n nonflat spectrum"
Sig2[i] = "TRUE"
} else {
Res[i] = "Segment has \n flat spectrum"
Sig2[i] = "FALSE"
}
}
blank1 <- textGrob(""); blank2 <- textGrob("")
new_tab <- data.frame("Frequency Bands" = spp, "P-Values" = round(as.numeric(pvals), 5),"Significant" = Sig2 ,"Results" = Res)
colnames(new_tab) <- c("Frequency \n Bands", "P-Value", "Significant", "Results")
test1 <- tableGrob(new_tab, rows = NULL);
title2 <- textGrob(expression(bold("Summary of Testing for Flat \n Spectrum in Each Segment")), gp=gpar(fontface = "bold"))
grid.arrange(title, table, title2, test1,blank2, heights = c(0.75,0.75,0.85,0.75, 1) ,nrow = 5,
vp = vp.l)
print (ggplot() + geom_point(aes(x = as.numeric(plot.list2()[[8]][,1]), y = as.numeric(plot.list2()[[8]][,2]))) + xlim(c(0,0.5)) + ylim(c(0,1)) +
xlab("Frequency") + ylab("P-Value") + scale_x_continuous(expand=c(0,0), limits=c(0,0.5)) + scale_y_continuous(expand = c(0,0), limits=c(0,1)) + ggtitle("P-Values for Testing Partition Points") + theme(plot.title = element_text(face="bold", hjust=0.5)) +
geom_vline(xintercept = plot.list2()[[5]], linetype = "dashed"), vp = vp.r)
dev.off()
}
)
}
shinyApp(ui = ui, server = server)
